%test.apim.roles.manager=manager

# PERMISSIONS
quarkus.http.auth.permission.basic.paths=/apim/auth/token/*
quarkus.http.auth.permission.basic.policy=authenticated
quarkus.http.auth.permission.basic.auth-mechanism=basic

quarkus.http.auth.permission.refresh.paths=/apim/auth/refresh,/apim/auth/public-keys
quarkus.http.auth.permission.refresh.policy=permit
quarkus.http.auth.permission.refresh.auth-mechanism=none

# this will authenticate all requests with JWT authentication (either via cookies or Bearer)
quarkus.http.auth.permission.bearer.paths=/apim/core/*,${apim.context-root}/*
quarkus.http.auth.permission.bearer.policy=authenticated
quarkus.http.auth.permission.bearer.auth-mechanism=access_token

# JWT
%test,dev.mp.jwt.verify.publickey.location=apim-keystore-dev.p12
%test,dev.smallrye.jwt.sign.key.location=apim-keystore-dev.p12
%test,dev.smallrye.jwt.keystore.password=dummy
%test,dev.smallrye.jwt.keystore.verify.key.alias=at
%test,dev.smallrye.jwt.keystore.sign.key.alias=at

%test,dev.smallrye.jwt.new-token.issuer=apim-internal
%test,dev.smallrye.jwt.new-token.audience=apim-external
smallrye.jwt.new-token.lifespan=300
%test,dev.smallrye.jwt.new-token.lifespan=3600

%test,dev.mp.jwt.verify.issuer=apim-internal
%test,dev.mp.jwt.verify.audiences=apim-external

mp.jwt.token.header=Cookie
mp.jwt.token.cookie=access_token
smallrye.jwt.always-check-authorization=true

# refresh token expiration
rt.expiration.days=7
